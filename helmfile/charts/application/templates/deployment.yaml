{{- range .Values.modules }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  {{ .name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ .replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .rollingUpdate_maxSurge }}
      maxUnavailable: {{ .rollingUpdate_maxUnavailable }}
  selector:
    matchLabels:
      module: {{ .name }}
      app: {{ .name }}
  template:
    metadata:
      labels:
        module: {{ .name }}
        app: {{ .name }}
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              module: {{ .name }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: module
                  operator: In
                  values:
                  - {{ .name }}
                - key: app
                  operator: In
                  values:
                  - {{ .name }}
              topologyKey: topology.kubernetes.io/zone 
      priorityClassName: "priority-class-mw-pods"
      containers:
      - name: {{ .name }}
        image: {{ $.Values.aws_account_id }}.dkr.ecr.{{ $.Values.region }}.amazonaws.com/{{ $.Values.env }}-{{ $.Values.project }}-{{ .name }}:{{ .commit_hash }}
        env: 
        {{- range $v := .env }}
        - name: {{ $v.name }}
          value: {{ $v.value | quote }}
        {{- end }}
        imagePullPolicy: Always
        ports:
          - name: healthcheck
            containerPort: {{ .containerPort }}
        volumeMounts:
          - mountPath: {{ .logPath }}
            name: log-volume
        resources:
          requests:
            memory: {{ .requests_memory }}
            cpu: {{ .requests_cpu }}
          limits:
            memory: {{ .limit_memory }}
            cpu: {{ .limit_cpu }}
        livenessProbe:
          httpGet:
            port: {{ .containerPort }}
            path: {{ .health_check_url  }}
#          timeoutSeconds: 5
          initialDelaySeconds: {{ .livenessProbe_initialDelaySeconds }}
          periodSeconds: {{ .livenessProbe_periodSeconds }}
        readinessProbe:
          httpGet:
            port: {{ .containerPort }}
            path: {{ .health_check_url  }}
#          timeoutSeconds: 5
          initialDelaySeconds: {{ .readinessProbe_initialDelaySeconds }}
          periodSeconds: {{ .readinessProbe_periodSeconds }}
      terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds }}
      volumes:
        - name: log-volume
          hostPath:
            path: /var/lib/docker/containers/{{ .name }}
            type: DirectoryOrCreate
---
{{- end }}